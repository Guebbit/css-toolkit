@use "sass:color";
@use "sass:math";
@use "sass:string";

/**
 * Return opaque color
 * color-opaque(#fff, rgba(0, 0, 0, .5)) => #808080
 * function credited to https://getbootstrap.com/
 */
@function color-opaque($background, $foreground) {
  @return mix(rgba($foreground, 1), $background, opacity($foreground) * 100%);
}


/**
 * Tint a color: mix a color with white
 * function credited to https://getbootstrap.com/
 */
@function color-tint($color, $weight) {
  @return mix(white, $color, $weight);
}


/**
 * Shade a color: mix a color with black
 * function credited to https://getbootstrap.com/
 */
@function color-shade($color, $weight) {
  @return mix(black, $color, $weight);
}


/**
 * Shade the color if the weight is positive, else tint it
 * function credited to https://getbootstrap.com/
 */
@function color-shift($color, $weight) {
  @return if($weight > 0, color-shade($color, $weight), color-tint($color, -$weight));
}


/**
 * Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
 */
@function color-contrast($color: #fff, $dark: #000, $light: #fff) {
  @if type-of($color) != color or $color == transparent {
    @return inherit;
  }
  $color-brightness: color-brightness($color);
  $light-text-brightness: color-brightness($light);
  $dark-text-brightness: color-brightness($dark);

  @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
}



// Return WCAG2.1 relative luminance
// See https://www.w3.org/TR/WCAG/#dfn-relative-luminance
// See https://en.wikipedia.org/wiki/Relative_luminance
// Gives %, less than 50 darker is better, less than 50, lighter.
@function color-brightness($color) {
  // fallback
  @if $color == transparent or type-of($color) != color {
    @return 100;
  }
  @return math.div(((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)), 255 * 100%);
}

/**
 * NEW numeric annotation
 * Hex to RGB (only numbers, transparentize would add rgba(*))
 * $color
 * $alpha:
 *    - 0: never 4° digit
 *    - 1: always 4° digit
 *    - 2: 4° digit only when needed
 * $classic: false = new number annotation
 */
@function extract-colors($color: #fff, $mode: 2, $classic: false){
  // colors only
  @if $color == transparent or type-of($color) != color {
    @return $color;
  }
  // new annotation
  $delimiter: " ";
  $delimiter-alpha: " / ";
  // old annotation
  @if $classic{
    $delimiter: ", ";
    $delimiter-alpha: ", ";
  }
  $alpha: alpha($color);
  @if $mode == 1 or ($mode == 2 and $alpha == 1) {
    @return red($color) + $delimiter + green($color) + $delimiter + blue($color);
  }
  // Regular RGBA compliant result ("number" notation)
  @return red($color) + $delimiter + green($color) + $delimiter + blue($color) + $delimiter-alpha + alpha($color); // * 100%
}

/**
 * Create default collection
 */
@function create-collection($color){
  $list: (
          "100": color-tint($color, 80%),
          "200": color-tint($color, 60%),
          "300": color-tint($color, 40%),
          "400": color-tint($color, 20%),
          "500": $color,
          "600": color-shade($color, 20%),
          "700": color-shade($color, 40%),
          "800": color-shade($color, 60%),
          "900": color-shade($color, 80%)
  );

  @return $list
}